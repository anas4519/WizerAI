import 'package:career_counsellor/constants/constants.dart';
import 'package:career_counsellor/pages/career_exploration/screens/ai_guides/compatibility_check_ai_guide.dart';
import 'package:career_counsellor/utils/utils.dart';
import 'package:career_counsellor/widgets/info_container.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:gpt_markdown/gpt_markdown.dart';
import 'package:hive_ce/hive.dart';
import 'package:lottie/lottie.dart';
import 'package:google_generative_ai/google_generative_ai.dart' as google_ai;

class CompatibilityCheck extends StatefulWidget {
  const CompatibilityCheck(
      {super.key, required this.career, required this.type});
  final String career;
  final String type;

  @override
  State<CompatibilityCheck> createState() => _CompatibilityCheckState();
}

class _CompatibilityCheckState extends State<CompatibilityCheck> {
  bool _isLoading = true;
  String? errorMessage;
  String body = '';
  final userBox = Hive.box('user_box');

  @override
  void initState() {
    super.initState();
    checkCompatibility();
  }

  Future<void> checkCompatibility() async {
    final model = google_ai.GenerativeModel(
      model: GEMINI_MODEL,
      apiKey: GEMINI_API_KEY,
    );

    final prompt = '''
    You are a career advisor bot. Given below are the details of a student. Check the compatibility of the student with the ${widget.type} ${widget.career} and suggest the student if the ${widget.type} is suitable for them. Respond in first person.
    Qualifications: ${userBox.get('qualifications') ?? ' '}
    Interests: ${userBox.get('interests') ?? ' '}
    Hobbies: ${userBox.get('hobbies') ?? ' '}
    Skills: ${userBox.get('skills') ?? ' '}
    Strengths: ${userBox.get('strengths') ?? ' '}
    Weaknesses: ${userBox.get('weaknesses') ?? ' '}
    Desired Lifestyle: ${userBox.get('desired_lifestyle') ?? ' '}
    Geographic Preferences: ${userBox.get('geographic_preferences') ?? ' '}
    Aspirations: ${userBox.get('aspirations') ?? ' '}
    Learning Curve: ${userBox.get('learning_curve') ?? ' '}
    Mother's Profession: ${userBox.get('mothers_profession') ?? ' '}
    Father's Profession: ${userBox.get('fathers_profession') ?? ' '}
    Parents' expectations: ${userBox.get('parents_expectations') ?? ' '}
    Interdisciplinary Options: ${userBox.get('interdisciplinary_options') ?? ' '}
    Current Financial Status: ${userBox.get('financial_status') ?? ' '}
    Salary Expectations: ${userBox.get('salary_expectations') ?? ' '}
    Additional Information: ${userBox.get('additional_info') ?? ' '}
    ''';
    final content = [google_ai.Content.text(prompt)];
    try {
      final result = await model.generateContent(content);
      setState(() {
        if (result.text != null) {
          String response = result.text!;
          body = response;
        }
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        showSnackBar(context, 'Error: $e');
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    return Scaffold(
        appBar: AppBar(
          title: const Text('Compatibility Check'),
          centerTitle: true,
        ),
        floatingActionButton: FloatingActionButton(
            shape: const CircleBorder(),
            onPressed: () {
              Navigator.of(context).push(MaterialPageRoute(
                  builder: (context) => CompatibilityCheckAiGuide(
                        title: widget.career,
                        prevContext: body,
                        type: widget.type,
                      )));
            },
            child: const Icon(CupertinoIcons.chat_bubble_2_fill)),
        body: _isLoading
            ? Center(
                child: Lottie.asset(
                  'assets/animations/ai-loader1.json',
                  width: screenWidth * 0.25,
                  height: screenWidth * 0.25,
                  fit: BoxFit.contain,
                ),
              )
            : errorMessage != null
                ? Center(
                    child: Text(
                      errorMessage!,
                      style: const TextStyle(color: Colors.red),
                    ),
                  )
                : SingleChildScrollView(
                    physics: const BouncingScrollPhysics(),
                    padding: EdgeInsets.all(screenWidth * 0.04),
                    child: Column(
                      children: [
                        GptMarkdown(
                          body,
                          style: const TextStyle(fontSize: 18),
                        ),
                        SizedBox(
                          height: screenWidth * 0.1,
                        ),
                        const InfoContainer(
                            text:
                                'This content is generated by AI and may sometimes contain inaccuracies or incomplete information. Please verify independently when necessary.')
                      ],
                    ),
                  ));
  }
}
